<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raghav Narula</title>
    <link>http://www.raghavnarula.co.uk/</link>
    <description>Recent content on Raghav Narula</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Raghav Narula 2016. All Rights Reserved.</copyright>
    <lastBuildDate>Tue, 16 Feb 2016 11:32:14 +0000</lastBuildDate>
    <atom:link href="http://www.raghavnarula.co.uk/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Contact Me</title>
      <link>http://www.raghavnarula.co.uk/contact/</link>
      <pubDate>Tue, 16 Feb 2016 11:32:14 +0000</pubDate>
      
      <guid>http://www.raghavnarula.co.uk/contact/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Intelligently Artificial F.C. - A Robocup Simulation League Team</title>
      <link>http://www.raghavnarula.co.uk/post/robocup/</link>
      <pubDate>Tue, 16 Feb 2016 11:26:51 +0000</pubDate>
      
      <guid>http://www.raghavnarula.co.uk/post/robocup/</guid>
      <description>&lt;div style=&#34;text-align: center&#34;&gt;
    &lt;iframe src=&#34;https://player.vimeo.com/video/155558305&#34; width=&#34;500&#34; height=&#34;264&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;This project was mine and &lt;a href=&#34;http://jamesfrost.me&#34;&gt;James Frost&amp;rsquo;s&lt;/a&gt; coursework for Introduction to Artificial Intelligence. We were tasked with creating an AI football team using the &lt;a href=&#34;http://robocup-atan.github.io/atan/&#34;&gt;ATAN&lt;/a&gt; interface to the &lt;a href=&#34;https://sourceforge.net/projects/sserver/&#34;&gt;Robocup 2D Soccer Simulation Server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our goal was to come up with some sort of architecture that would allow us to seperate our design in to a collection of small simple components, each design to do just one clearly defined task. These &amp;ldquo;AI Components&amp;rdquo; are arranged sequentially, and once they finish processing a task, they hand the processed data over to the next component in the chain, being careful to make a clean hand-off and not keep and references. This means each component could run as a concurrent process if required. The finished arrangement looked something like the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.raghavnarula.co.uk/img/robocup.jpg&#34; alt=&#34;&amp;quot;Robocup Architecture&amp;quot;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Initially the model contains nothing but the raw sensor data given by the ATAN interface at that simulation step. When it arrives at a component, the component uses the raw data to do some processing and more information to the model. This could be something simple like figuring out which way the agent is facing, how fast it&amp;rsquo;s moving or which way to the goal. Eventually the model can be handed off to the agent at the end of the chain, where the information in the model can be used to generate an action.&lt;/p&gt;

&lt;p&gt;Overall the architecture worked really well. Not only did it make the code easier to reason about, it also made it easier to collaborate with another programmer, as we could work on seperate components knowing we wouldn&amp;rsquo;t interfere with eachother&amp;rsquo;s work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Oscar</title>
      <link>http://www.raghavnarula.co.uk/post/oscar/</link>
      <pubDate>Mon, 15 Feb 2016 22:39:12 +0000</pubDate>
      
      <guid>http://www.raghavnarula.co.uk/post/oscar/</guid>
      <description>&lt;p&gt;Oscar started life as a desktop C++ called OSCBridge. The idea was simple, Set up an OSC server, establish a TCP connection to a device such as a &lt;a href=&#34;https://www.barco.com/en/Products/Image-processing/Presentation-switchers/Multi-layer-video-display-system.aspx&#34;&gt;Barco ScreenPRO-II&lt;/a&gt; series switcher, and be able to forward messages recieved at the OSC server to the switcher. Devices such as the barco often come with their own set of commands that can be initiated via telnet. The idea wasn&amp;rsquo;t to build an extra abstraction over the available commands, but simply to provide a more convenient interface.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://github.com/ragnarula/oscbridge&#34;&gt;original implementation&lt;/a&gt; did what it was meant to but created a large budren on the developer (me!) to package the software for multiple platforms, operating systems etc etc&amp;hellip; As well as headaches with linking to and shipping Qt libraries in a way which didn&amp;rsquo;t contradict their license terms. Eventually I came to the conclusion that it was time to change the architecture to one which didn&amp;rsquo;t depend on the user&amp;rsquo;s platform. Oscar was born.&lt;/p&gt;

&lt;p&gt;Oscar is developed in python and is designed to be run as embedded software. This means I no longer have to worry about developing for multiple platforms, and instead offer the solution as a hardware device, or at the very least, a virtual appliance. In either case, I can specify the environment as part of the software. Development was done with a Raspberry Pi which was able to handle the workload without breaking a sweat.&lt;/p&gt;

&lt;p&gt;Oscar also now employs an event driven, message passing design. Messages are recieved at the OSC interface and passed to seperate routines running in green threads for asyncronous processing, freeing up the OSC server to recieve more messages. Failures from malformed messages occur fast and don&amp;rsquo;t bring down the entire system. New threads are only created when establishing new connections to newly input device definitions, unlike the old system which created a new thread to process each message.&lt;/p&gt;

&lt;p&gt;Overall, it is more efficient, more ressilient to failure and carries a much lower burden from variations in deployment environments.&lt;/p&gt;

&lt;p&gt;Oscar was tested on a three day event in September 2015, where it was able to route messages from two &lt;a href=&#34;https://figure53.com/qlab/&#34;&gt;Qlab&lt;/a&gt; controllers to nine &lt;a href=&#34;http://dtvideolabs.com/PlaybackPro.html&#34;&gt;Playback Pro&lt;/a&gt; machines without a hitch.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://www.raghavnarula.co.uk/about/</link>
      <pubDate>Mon, 15 Feb 2016 09:52:49 +0000</pubDate>
      
      <guid>http://www.raghavnarula.co.uk/about/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>